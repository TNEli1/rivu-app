Please conduct a thorough audit of the entire Rivu application — frontend and backend — with a focus on resolving the following recurring issues and checking for any potential deployment or security concerns:

⸻

1. API Connectivity / Content Security Policy (CSP)
	•	Confirm the Content-Security-Policy header in the frontend allows connections to:
	•	https://rivu-app.onrender.com
	•	https://api.tryrivu.com
	•	https://cdn.plaid.com
	•	https://production.plaid.com
	•	https://posthog.com
	•	https://render.com
	•	Ensure the CSP is injected either via meta tags or HTTP headers.
	•	Confirm this applies in both development and production builds.

⸻

2. PostHog Analytics Configuration
	•	Verify that POSTHOG_API_KEY is:
	•	Present in Replit and Render secrets
	•	Exposed as VITE_POSTHOG_API_KEY (or relevant format) in the frontend build
	•	Properly initialized in the client using import.meta.env
	•	Log warnings if the key is undefined at runtime.

⸻

3. API URL Configuration
	•	Ensure getApiBaseUrl() or any config that resolves the backend URL:
	•	Returns https://rivu-app.onrender.com in production
	•	Is not overwritten by '' or localhost in production builds
	•	Is environment-aware and properly deployed

⸻

4. Environment Variables
	•	Confirm these secrets are correctly injected into their respective environments:
	•	DATABASE_URL
	•	POSTMARK_API_KEY
	•	EMAIL_FROM (e.g. support@tryrivu.com)
	•	SESSION_SECRET
	•	POSTHOG_API_KEY
	•	PLAID_CLIENT_ID, PLAID_SECRET, etc.

⸻

5. Email and Auth Flow
	•	Ensure email verification works:
	•	Postmark is sending properly from support@tryrivu.com
	•	Emails reflect Rivu branding and not “Rivu Finance”
	•	Unverified users are blocked from logging in
	•	Confirm password reset and registration confirmation emails are styled, tracked, and deliverable

⸻

6. Opt-In Email Handling
	•	Confirm new registration opt-in checkboxes (for updates/offers):
	•	Are logged in the database
	•	Can be exported or queried
	•	Follow proper consent requirements (GDPR-ready if needed)

⸻

7. Frontend Rendering / Styling Issues
	•	Ensure cached CSS/JS issues are resolved using content-based file hashing or versioned assets
	•	Confirm mobile and SEO optimizations are in place (viewport tag, metadata, structured data)

⸻

8. Database and Performance
	•	Confirm the production database is being used (Render DB, not Neon)
	•	All migrations have been applied correctly
	•	Monitor DB usage spikes (especially after sign-up testing)

⸻

9. Documentation
	•	Document all bugs and fixes in TROUBLESHOOTING_GUIDE.md, including:
	•	CSP errors
	•	API connection errors
	•	PostHog and env var misconfigurations

⸻

Once this audit is complete, please report:
	•	What was fixed
	•	What was confirmed as working
	•	Any recommended next steps

We’re preparing for production — please treat this as a final stabilization sweep.