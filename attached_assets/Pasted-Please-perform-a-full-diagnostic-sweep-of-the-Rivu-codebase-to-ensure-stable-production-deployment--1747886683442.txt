Please perform a full diagnostic sweep of the Rivu codebase to ensure stable production deployment. We’ve recently experienced deployment failures, NeonDB incompatibilities, and environment inconsistencies. The app is now fully hosted on Render, using a Render-hosted PostgreSQL database.

⸻

Please verify and correct the following:

1. PostgreSQL Connection
	•	Confirm we are no longer using @neondatabase/serverless
	•	Ensure we are using the standard pg package or drizzle-orm/node-postgres for connection
	•	Verify DATABASE_URL is read from environment variables (with SSL enabled)
	•	Check that server/db.ts reflects this setup

2. Sweep for Legacy or Broken Imports
	•	Search all files for outdated or broken imports, especially around:
	•	neon, createClient, or neonConfig
	•	Old controller paths or route names
	•	formatCurrency and other utility functions used in UI/analytics

3. Backend Routing and Auth
	•	Confirm JWT auth is enforced on all routes using user ID checks
	•	Confirm routes are scoped correctly (user_id = auth.id)
	•	Ensure no sensitive tokens (Plaid, GPT, Postmark, etc.) are exposed in the frontend

4. Database Health
	•	Confirm the following Drizzle/PostgreSQL schemas exist and are working:
	•	users, transactions, plaid_accounts, user_identity, score_history, user_feedback
	•	Ensure all migrations are valid and up to date
	•	Confirm migrate.ts is not broken or misnamed in server/migrations/index.ts

5. Frontend Integration
	•	Ensure static file serving is correctly configured for Render deployment
	•	Confirm vite.config.ts is resolving output and assets correctly
	•	Validate that NEXT_PUBLIC_API_URL or similar client-side env vars are routing to the deployed backend

6. PostHog Analytics
	•	Confirm PostHog is initialized properly and all key events (e.g. user_signed_up, plaid_connected, dashboard_engaged) are emitted
	•	Ensure PostHog API key is not exposed in the frontend
	•	Confirm privacy-preserving analytics logic is in place

7. Error Handling
	•	Add fallback handlers for DB failures and 404 routes
	•	Ensure unhandled async errors in controllers are caught and logged
	•	Validate that no sensitive data is logged in plaintext (especially Plaid responses)

⸻

Deploy Instructions:

Once everything is verified and fixed:
	1.	Commit all changes in Replit
	2.	Push to GitHub
	3.	Deploy cleanly to Render (single service for frontend + backend)
	4.	Confirm tryrivu.com loads the full app without 404s or static fallback screens

⸻

The goal is a clean, stable, and secure unified deployment running entirely from Render.