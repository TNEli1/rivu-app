Rivu Inc. is preparing to launch publicly as a U.S.-based, Delaware C Corporation providing behavioral finance tools through AI and API integrations. The app is hosted on Railway with PostgreSQL, and the production domain is https://tryrivu.com. Implement the following with zero regressions or reintroductions of removed features.

‚∏ª

1. LEGAL & PRIVACY LOCKDOWN (U.S. + Global Readiness)

Update the Terms of Service and Privacy Policy with the following:

‚úÖ Corporate Entity & Jurisdiction
	‚Ä¢	‚ÄúRivu Inc. is a Delaware C Corporation governed under the laws of the State of Delaware.‚Äù

‚úÖ Arbitration & Class Action Waiver
	‚Ä¢	All disputes must be resolved by binding arbitration (AAA), no jury trials or class actions.

‚úÖ Data Rights & Privacy (for U.S. and international laws)
	‚Ä¢	CCPA/CPRA (California): Data access, deletion, opt-out rights.
	‚Ä¢	GDPR (EEA): Right to access, rectify, and erase personal data.
	‚Ä¢	NY SHIELD Act: Reasonable security practices acknowledged.

‚úÖ Disclaimers
	‚Ä¢	‚ÄúRivu is not a financial advisor, fiduciary, or bank. All AI outputs are educational only.‚Äù
	‚Ä¢	‚ÄúBank connections use Plaid. Rivu does not store bank credentials.‚Äù

‚úÖ Age Restriction
	‚Ä¢	Users must be 18+ and U.S. residents.

‚úÖ Consent Enforcement
	‚Ä¢	Checkbox at signup required:
‚ÄúI agree to the Terms of Service and Privacy Policy. I understand this app uses AI and personal financial data for educational guidance only.‚Äù

‚úÖ ‚ÄúDelete My Data‚Äù Feature
	‚Ä¢	Email-based request or dashboard toggle for full user data deletion.

‚∏ª

2. GPT TOKEN USAGE CONTROL

‚úÖ GPT usage must only occur:
	‚Ä¢	When a user explicitly clicks a ‚ÄúCoach‚Äù prompt
	‚Ä¢	Or responds to a behavioral nudge with consent

‚ùå GPT usage must not trigger:
	‚Ä¢	On dashboard load
	‚Ä¢	During data imports (CSV, Plaid)
	‚Ä¢	During budget or goal creation

‚úÖ Backend must enforce:
	‚Ä¢	Only process GPT calls with:

{ "userPrompt": "...", "nudgeConfirmed": true }

‚Ä¢	Return 400 error otherwise

‚∏ª

3. TRANSACTION CATEGORIZATION + INSIGHT ENGINE

Build and enable intelligent categorization and behavior analysis:

‚úÖ Ingest from Plaid:
	‚Ä¢	Store: category, subcategory, merchant_name, amount, date, account_id, user_id
	‚Ä¢	Leverage Plaid‚Äôs category_id and category array

‚úÖ CSV + Manual Transactions:
	‚Ä¢	Use regex or keyword matching for basic classification
	‚Ä¢	(Future upgrade: use GPT for description-based classification)

‚úÖ Insights Engine:
	‚Ä¢	Group transactions by month & category
	‚Ä¢	Show:
	‚Ä¢	Top 3 categories by spend
	‚Ä¢	% change from previous month
	‚Ä¢	Behavioral flags (e.g. ‚ÄúDining up 45%‚Äù)

‚úÖ Frontend Dashboard:
	‚Ä¢	Show pie or bar charts
	‚Ä¢	Show AI nudge triggers for spikes (user must opt-in before GPT)

‚∏ª

4. DATABASE + BACKEND HARDENING
	‚Ä¢	Use Railway PostgreSQL exclusively
	‚Ä¢	Run:

npx drizzle-kit push:pg

	‚Ä¢	Remove all Replit, Neon, or localhost logic
	‚Ä¢	Ensure schema includes:
	‚Ä¢	category, subcategory, merchant_name, source, authMethod, tosAcceptedAt, emailVerified
	‚Ä¢	Secure session and JWT logic

‚∏ª

5. LANDING PAGE FINAL BUILD (Framer or Motion.js)

Use Framer or equivalent to:
	‚Ä¢	Add animated hero section
	‚Ä¢	Motion cards for:
	‚Ä¢	AI Coach
	‚Ä¢	Budget dashboard
	‚Ä¢	Rivu Score
	‚Ä¢	Plaid bank linking
	‚Ä¢	CSV upload
	‚Ä¢	iOS App Coming Soon banner
	‚Ä¢	Waitlist form (via Postmark to support@tryrivu.com)
	‚Ä¢	Footer: links to /terms, /privacy, legal entity text

‚∏ª

6. SEO, MOBILE, PERFORMANCE
	‚Ä¢	Add <title>, <meta name="description">, Open Graph, and Twitter Card tags
	‚Ä¢	Add robots.txt, sitemap.xml, apple-touch-icon
	‚Ä¢	Ensure full responsiveness across all mobile views
	‚Ä¢	Lighthouse score >90 on mobile
	‚Ä¢	Remove unused CSS/JS

‚∏ª

7. INFRASTRUCTURE, SECURITY, AND TESTING
	‚Ä¢	Secure all environment variables:
	‚Ä¢	OPENAI_API_KEY, POSTMARK_API_KEY, PLAID_CLIENT_ID, PLAID_SECRET_PRODUCTION, GOOGLE_CLIENT_ID, GOOGLE_CLIENT_SECRET, JWT_SECRET, SESSION_SECRET, BASE_URL
	‚Ä¢	Session cookies:
	‚Ä¢	secure: true, httpOnly: true, sameSite: 'strict'
	‚Ä¢	Use Helmet and rate-limiting middleware
	‚Ä¢	Sanitize logs (never log tokens or PII)
	‚Ä¢	Add /health route and ensure it passes on Railway
	‚Ä¢	Test all flows:
	‚Ä¢	Email signup + verification
	‚Ä¢	Google OAuth login
	‚Ä¢	Waitlist form
	‚Ä¢	Transaction imports
	‚Ä¢	AI coaching trigger
	‚Ä¢	CSV upload
	‚Ä¢	Account deletion

‚∏ª

Once complete, push changes to GitHub and trigger full production deploy via Railway.

We‚Äôve previously experienced a critical issue where one user (e.g. Eli) was able to view data from another user (e.g. Eli33). This must be permanently fixed and protected against at all layers.

‚∏ª

1. ABSOLUTE DATA ISOLATION REQUIREMENT

Every database query or API response that deals with user-specific content must be scoped by user_id or equivalent authenticated session ID.

‚úÖ Example Fix:

const transactions = await db.select().from(transactions).where(eq(transactions.userId, req.user.id));

‚ùå NEVER allow unscoped queries like:

SELECT * FROM transactions

or:

db.select().from(transactions)

Without a where userId = ? clause tied to the current authenticated user.

‚∏ª

2. BACKEND SAFEGUARDS (EXPRESS / API MIDDLEWARE)

‚úÖ Add middleware to verify identity on all private routes:

if (!req.user || req.user.id !== req.body.userId) {
  return res.status(403).json({ error: "Unauthorized access." });
}

Apply this to:
	‚Ä¢	Transactions API
	‚Ä¢	Goals
	‚Ä¢	Budgets
	‚Ä¢	AI Coach prompts
	‚Ä¢	Plaid-linked accounts
	‚Ä¢	CSV uploads
	‚Ä¢	Any insights/dashboard summary endpoint

‚∏ª

3. DATABASE LEVEL SCOPING

If possible, enforce row-level permissions in queries (Postgres views or Drizzle logic) that always return:

WHERE user_id = $current_user_id

Or add wrapper utilities like:

function getUserData(table, userId) {
  return db.select().from(table).where(eq(table.userId, userId));
}

4. FRONTEND GUARDRAILS
	‚Ä¢	Never allow userId to be passed manually from frontend to backend
	‚Ä¢	Derive userId server-side from the JWT/session only

‚∏ª

5. ACCOUNT SWITCH PROTECTION
	‚Ä¢	If using cookies or session-based auth, clear sessions fully on logout
	‚Ä¢	Prevent cross-session data caching
	‚Ä¢	Add a backend route test:

GET /api/me ‚Üí returns userId
GET /api/transactions ‚Üí must return only that user‚Äôs data

Test this flow for session bleeding.

‚∏ª

6. OTHER SECURITY HARDENING TO ADD
	‚Ä¢	Use UUIDs or hashed IDs for user references (avoid predictable user.id = 1)
	‚Ä¢	Add logs for suspicious access:
	‚Ä¢	E.g., User A requests user B‚Äôs data (500/403 events)
	‚Ä¢	Add session expiration logic (e.g., auto-logout after 24h)
	‚Ä¢	Enforce HTTPS-only cookies

Final Summary
Feature	Enforced?
All queries scoped by user	‚úÖ Must be
Auth middleware on API routes	‚úÖ Required
Session isolation and cleanup	‚úÖ Required
No raw userId from frontend	‚úÖ Required
Logged suspicious access	‚úÖ Optional now, recommended later

Once complete, push changes to GitHub and trigger a secure deployment to Railway.
Notify when done, and I‚Äôll provide a privacy assurance statement for investors and partners.

We are confirming full implementation of Rivu‚Äôs transaction tracker feature ‚Äî a core product requirement. This must be complete, stable, and production-ready.

‚∏ª

‚úÖ 1. Transaction Ingestion

From Plaid:
	‚Ä¢	Extract and store:
	‚Ä¢	amount
	‚Ä¢	date
	‚Ä¢	merchant_name
	‚Ä¢	category (primary)
	‚Ä¢	subcategory (if available)
	‚Ä¢	category_id
	‚Ä¢	account_id
	‚Ä¢	source = 'plaid'
	‚Ä¢	user_id (required to scope all records)

From CSV Upload:
	‚Ä¢	Parse each row and attempt categorization by:
	‚Ä¢	Keyword match on description or merchant_name
	‚Ä¢	Fallback to "Uncategorized"

‚∏ª

‚úÖ 2. Categorization + Icons

For each transaction, display a category icon based on the assigned type. Example mappings:
Category	Icon Name / Type
Groceries	ü•¶ vegetable or grocery bag icon
Dining/Restaurants	üçΩÔ∏è fork & knife
Transportation	üöó or bus icon
Subscriptions	üí≥ recurring charge icon
Entertainment	üé¨ ticket or controller
Utilities	üí° light bulb or plug
Health	‚öïÔ∏è medical cross
Uncategorized	‚ùì question mark

Use system emojis or SVG icons from a library like Heroicons, Feather, or Font Awesome.
	‚Ä¢	Icons should render next to category name in the transaction table or feed.

‚∏ª

‚úÖ 3. Monthly Insights Engine

System must:
	‚Ä¢	Group transactions by:
	‚Ä¢	user_id
	‚Ä¢	category
	‚Ä¢	month
	‚Ä¢	Return insights per user:
	‚Ä¢	Total per category this month
	‚Ä¢	% change from last month
	‚Ä¢	Flag spikes (e.g. ‚ÄúDining up 60%‚Äù)

‚∏ª

‚úÖ 4. Frontend Display

Transaction dashboard must:
	‚Ä¢	Show list/table of transactions with:
	‚Ä¢	Amount
	‚Ä¢	Date
	‚Ä¢	Merchant Name
	‚Ä¢	Category
	‚Ä¢	Icon
	‚Ä¢	Optionally allow:
	‚Ä¢	Filtering by category or month
	‚Ä¢	Toggle for Plaid vs CSV vs All sources

‚∏ª

‚úÖ 5. Privacy, Scope, and GPT Efficiency
	‚Ä¢	All data must be scoped by user_id ‚Äî no shared data leaks
	‚Ä¢	GPT should not be triggered automatically when importing or viewing data
	‚Ä¢	AI advice should only run when:
	‚Ä¢	User clicks ‚ÄúAsk Coach‚Äù
	‚Ä¢	User accepts a behavior nudge

‚∏ª

‚ùó This is a critical product feature.

Please confirm:
	‚Ä¢	It is working end-to-end
	‚Ä¢	Categorization is accurate
	‚Ä¢	Icons render correctly
	‚Ä¢	Insights are calculated and returned
	‚Ä¢	No user can see another user‚Äôs transactions

Once confirmed, push changes to GitHub and deploy to Railway. This feature must be stable, secure, visually polished, and performant.